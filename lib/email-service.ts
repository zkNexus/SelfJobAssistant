import { Resend } from "resend";

export interface EmailOptions {
  to: string;
  subject: string;
  coverLetter: string;
  companyName?: string;
  positionTitle?: string;
}

export async function sendCoverLetterEmail(options: EmailOptions): Promise<boolean> {
  const { to, coverLetter, companyName, positionTitle } = options;

  // Initialize Resend with API key
  const resend = new Resend(process.env.RESEND_API_KEY);
  const fromEmail = process.env.RESEND_FROM_EMAIL || "onboarding@resend.dev";

  const subject = positionTitle && companyName
    ? `Your Cover Letter for ${positionTitle} at ${companyName}`
    : positionTitle
    ? `Your Cover Letter for ${positionTitle}`
    : "Your AI-Generated Cover Letter";

  const htmlContent = `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      line-height: 1.6;
      color: #333;
      max-width: 650px;
      margin: 0 auto;
      padding: 20px;
      background-color: #f4f4f4;
    }
    .container {
      background-color: white;
      padding: 40px;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .header {
      border-bottom: 3px solid #0066cc;
      padding-bottom: 20px;
      margin-bottom: 30px;
    }
    .header h1 {
      color: #0066cc;
      margin: 0;
      font-size: 24px;
    }
    .cover-letter {
      white-space: pre-wrap;
      font-size: 15px;
      line-height: 1.8;
      margin: 30px 0;
    }
    .footer {
      margin-top: 40px;
      padding-top: 20px;
      border-top: 1px solid #ddd;
      font-size: 13px;
      color: #666;
    }
    .footer a {
      color: #0066cc;
      text-decoration: none;
    }
    .tips {
      background-color: #f8f9fa;
      border-left: 4px solid #0066cc;
      padding: 15px;
      margin-top: 30px;
      font-size: 14px;
    }
    .tips h3 {
      margin-top: 0;
      color: #0066cc;
      font-size: 16px;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>‚ú® Your AI-Generated Cover Letter</h1>
      <p style="margin: 10px 0 0 0; color: #666;">Powered by JobAssistant x402</p>
    </div>

    <div class="cover-letter">${coverLetter}</div>

    <div class="tips">
      <h3>üìù Next Steps:</h3>
      <ul style="margin: 10px 0; padding-left: 20px;">
        <li>Review and personalize the cover letter with your own voice</li>
        <li>Add specific details about why you're excited about this company</li>
        <li>Proofread for any errors or awkward phrasing</li>
        <li>Save as a PDF before submitting</li>
        <li>Include your contact information at the top</li>
      </ul>
    </div>

    <div class="footer">
      <p><strong>Generated by JobAssistant x402</strong><br>
      AI-powered cover letter generation with proof-of-unique-human verification</p>
      <p style="margin-top: 15px;">
        <a href="https://github.com/JulioMCruz/Self-x402">Learn more about x402 payments</a> |
        <a href="https://docs.self.xyz">Self Protocol</a>
      </p>
      <p style="margin-top: 15px; font-size: 12px; color: #999;">
        This cover letter was generated using AI based on your resume and the job description.
        Please review and customize it before submitting to employers.
      </p>
    </div>
  </div>
</body>
</html>`;

  const textContent = `Your AI-Generated Cover Letter
Powered by JobAssistant x402

${coverLetter}

---

Next Steps:
- Review and personalize the cover letter with your own voice
- Add specific details about why you're excited about this company
- Proofread for any errors or awkward phrasing
- Save as a PDF before submitting
- Include your contact information at the top

Generated by JobAssistant x402
AI-powered cover letter generation with proof-of-unique-human verification

This cover letter was generated using AI based on your resume and the job description.
Please review and customize it before submitting to employers.`;

  try {
    const { data, error } = await resend.emails.send({
      from: `JobAssistant x402 <${fromEmail}>`,
      to: [to],
      subject,
      text: textContent,
      html: htmlContent,
    });

    if (error) {
      console.error("Resend error:", error);
      throw new Error(`Failed to send email: ${error.message}`);
    }

    console.log("Email sent successfully via Resend:", data?.id);
    return true;
  } catch (error) {
    console.error("Email sending error:", error);
    throw new Error(`Failed to send email: ${error instanceof Error ? error.message : "Unknown error"}`);
  }
}

export async function validateEmailServiceConfiguration(): Promise<boolean> {
  if (!process.env.RESEND_API_KEY) {
    console.error("RESEND_API_KEY not configured");
    return false;
  }
  if (!process.env.RESEND_FROM_EMAIL) {
    console.warn("RESEND_FROM_EMAIL not configured, using default: onboarding@resend.dev");
  }
  return true;
}
